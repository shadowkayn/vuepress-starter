import{_ as l,c,a as o,b as s,d as a,e as t,w as e,r as i,o as u}from"./app-TMUouyAw.js";const r="/vuepress-starter/images/jsImages/1.jpg",k={};function d(m,n){const p=i("font");return u(),c("div",null,[n[69]||(n[69]=o(`<h3 id="_1、模板字符串高阶用法" tabindex="-1"><a class="header-anchor" href="#_1、模板字符串高阶用法"><span>1、模板字符串高阶用法</span></a></h3><h4 id="标签模板" tabindex="-1"><a class="header-anchor" href="#标签模板"><span>标签模板</span></a></h4><p>有如下代码：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">function</span> <span class="token function">tag</span><span class="token punctuation">(</span><span class="token parameter">strings<span class="token punctuation">,</span> <span class="token operator">...</span>values</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strings<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&quot;Hello, &quot;, &quot;! You are &quot;, &quot; years old.&quot;]</span></span>
<span class="line">  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [&quot;Alice&quot;, 25]</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>strings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>strings<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&quot;Alice&quot;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>tag<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">! You are </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old.</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当调用 tag 函数时，JS 引擎会 拆分模板字符串：</p><ul><li>strings（模板的静态部分）</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token punctuation">[</span><span class="token string">&quot;Hello, &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;! You are &quot;</span><span class="token punctuation">,</span> <span class="token string">&quot; years old.&quot;</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>values（插值部分）</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token punctuation">[</span><span class="token string">&quot;Alice&quot;</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>拼接返回值</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>values<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>strings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>values<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>strings<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// &quot;Hello, ALICE! You are 25 years old.&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>由此，可以联通想到另一种场景，给元素添加样式：</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">cssFunc</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">values<span class="token punctuation">,</span> <span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>values<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 打印模板中静态部分 [&#39;background-color: &#39;, &#39;;color: white;&#39;]</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 打印模板中动态部分 [&#39;red&#39;]</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> color <span class="token operator">=</span> <span class="token string">&#39;red&#39;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> style <span class="token operator">=</span> cssFunc<span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">background-color: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>color<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;color: white;</span><span class="token template-punctuation string">\`</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这样一来就可以灵活的处理css样式，动态的生成带有插值的样式内容<br></p><p>这也就是大名鼎鼎的 <a href="https://styled-components.com/docs" target="_blank" rel="noopener noreferrer">Styled-Component</a> 第三方库的实现原理，react框架 <strong>CSS-in-JS 方案</strong></p><p>除此之外 react 在使用动态类名时，也会用到 <strong>clsx</strong> 方案</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// Tailwind 配合 clsx</span></span>
<span class="line"><span class="token keyword">import</span> clsx <span class="token keyword">from</span> <span class="token string">&quot;clsx&quot;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> isPrimary <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> btnClass <span class="token operator">=</span> <span class="token function">clsx</span><span class="token punctuation">(</span><span class="token string">&quot;p-4&quot;</span><span class="token punctuation">,</span> isPrimary <span class="token operator">&amp;&amp;</span> <span class="token string">&quot;bg-blue-500&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">MyComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token keyword">return</span> <span class="token operator">&lt;</span>button className<span class="token operator">=</span><span class="token punctuation">{</span>btnClass<span class="token punctuation">}</span><span class="token operator">&gt;</span>Click<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2、异步数据竞争态问题解决" tabindex="-1"><a class="header-anchor" href="#_2、异步数据竞争态问题解决"><span>2、异步数据竞争态问题解决</span></a></h3><p>有一种场景，当多个tab页频繁切换过快时，会造成返回数据的顺序和请求的顺序不一致，导致数据错误<br> 例如，在页面A中发起请求，快速切换页面，在页面B中发起请求，当页面A和页面B都返回数据时，页面A的数据会覆盖页面B的数据，导致页面A的数据错误 <img src="`+r+`" alt=""></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">NOOP</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 封装一个取消请求的高阶函数，用来取消上一次异步请求</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">ceateCancelTask</span><span class="token punctuation">(</span><span class="token parameter">asyncTask</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 1、首先创建一个空函数cancel</span></span>
<span class="line">    <span class="token keyword">let</span> cancel <span class="token operator">=</span> <span class="token constant">NOOP</span><span class="token punctuation">;</span> </span>
<span class="line">    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token comment">// 3、在这个时候取消上一次请求</span></span>
<span class="line">            <span class="token comment">// 也就是当上一次请求还没完成时,又收到了新的请求,这个时候重新调用ceateCancelTask请求</span></span>
<span class="line">            <span class="token comment">// 代码执行到这里时,执行取消上次请求,也就是执行cancel()</span></span>
<span class="line">            <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token comment">// 2、给空函数赋值，用于取消上一次的请求，怎么取消？如下，将resolve 和 reject 置为 NOOP 就行</span></span>
<span class="line">            <span class="token function-variable function">cancel</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">                resolve <span class="token operator">=</span> reject <span class="token operator">=</span> <span class="token constant">NOOP</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token function">asyncTask</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                <span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">)</span> </span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 模拟封装的请求</span></span>
<span class="line"><span class="token keyword">export</span> <span class="token keyword">const</span> fetchData <span class="token operator">=</span> <span class="token function">ceateCancelTask</span><span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">type</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">http://xxx?type=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>type<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">res</span> <span class="token operator">=&gt;</span> res<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token string">&#39;1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token function">fetchData</span><span class="token punctuation">(</span><span class="token string">&#39;2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、常用的一些实用的javascript语法糖" tabindex="-1"><a class="header-anchor" href="#_3、常用的一些实用的javascript语法糖"><span>3、常用的一些实用的JavaScript语法糖</span></a></h3><p>空值合并运算符 ??</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 传统写法</span></span>
<span class="line"><span class="token keyword">const</span> name <span class="token operator">=</span> user<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> user<span class="token punctuation">.</span>name <span class="token operator">!==</span> <span class="token keyword">undefined</span> <span class="token operator">?</span> user<span class="token punctuation">.</span>name <span class="token operator">:</span> <span class="token string">&#39;default&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 简写方式</span></span>
<span class="line"><span class="token keyword">const</span> name <span class="token operator">=</span>user<span class="token punctuation">.</span>name <span class="token operator">??</span><span class="token string">&#39;default&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>快速取整 ~~</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 传统写法</span></span>
<span class="line"><span class="token keyword">const</span> floor <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token number">4.9</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 简写方式</span></span>
<span class="line"><span class="token keyword">const</span> floor <span class="token operator">=</span> <span class="token operator">~</span><span class="token operator">~</span><span class="token number">4.9</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>合并对象</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 传统写法</span></span>
<span class="line"><span class="token keyword">const</span> merged <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> obj1<span class="token punctuation">,</span> obj2<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 简写方式</span></span>
<span class="line"><span class="token keyword">const</span> merged <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj1<span class="token punctuation">,</span> <span class="token operator">...</span>obj2<span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>短路求值</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 传统写法</span></span>
<span class="line"><span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 简写方式</span></span>
<span class="line">condition <span class="token operator">&amp;&amp;</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>字符串转数字</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 传统写法</span></span>
<span class="line"><span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;123&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 简写方式</span></span>
<span class="line"><span class="token keyword">const</span> num <span class="token operator">=</span><span class="token operator">+</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>多重条件判断</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 传统写法</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">===</span><span class="token number">1</span> <span class="token operator">||</span> value<span class="token operator">===</span><span class="token number">2</span> <span class="token operator">||</span> value <span class="token operator">===</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token comment">// 简写方式</span></span>
<span class="line"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// ...</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>快速幂运算</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 传统写法</span></span>
<span class="line">Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 简写方式</span></span>
<span class="line"><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>交换变量值</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 传统写法</span></span>
<span class="line"><span class="token keyword">let</span> temp <span class="token operator">=</span> a<span class="token punctuation">;</span></span>
<span class="line">a <span class="token operator">=</span> b<span class="token punctuation">;</span></span>
<span class="line">b <span class="token operator">=</span> temp<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 简写方式</span></span>
<span class="line"><span class="token punctuation">[</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token operator">=</span> <span class="token punctuation">[</span>b<span class="token punctuation">,</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4、五个场景务必使用function" tabindex="-1"><a class="header-anchor" href="#_4、五个场景务必使用function"><span>4、五个场景务必使用function</span></a></h3><p><strong><strong>箭头函数并不能完全替代传统的 function 关键字。过度滥用箭头函数，尤其是在不理解其工作原理的情况下，会导致难以追踪的 bug 和意外行为。this 的指向是 JavaScript 中最核心也最容易混淆的概念之一，而箭头函数和传统 function 在 this 的处理上有着本质区别。</strong></strong><br><strong><strong>核心区别速记：</strong></strong></p><ul><li>function: this 的值是在函数被调用时动态决定的，取决于谁调用了它。</li><li>=&gt; (箭头函数): 它没有自己的 this。它会捕获其定义时所在上下文的 this 值，这个绑定是固定的，不会改变。</li></ul><br><p><em><strong>场景一：对象的方法 (Object Methods)</strong></em></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 错误示范</span></span>
<span class="line"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;老王&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 这里的 this 继承自全局作用域 (在浏览器中是 window)，而不是 person 对象</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">大家好，我是 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">person<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &quot;大家好，我是 &quot; (或者 &quot;大家好，我是 undefined&quot;)</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 正确示范（使用function）</span></span>
<span class="line"><span class="token keyword">const</span> person <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;老王&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token function-variable function">sayHi</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 这里的 this 在调用时被动态绑定为 person 对象</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">大家好，我是 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token comment">// ES6 对象方法简写形式，本质上也是一个 function</span></span>
<span class="line">    <span class="token function">sayHiShorthand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">大家好，我是 </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">person<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &quot;大家好，我是 老王&quot;</span></span>
<span class="line">person<span class="token punctuation">.</span><span class="token function">sayHiShorthand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 输出: &quot;大家好，我是 老王&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结论： 当我们为对象定义一个需要引用该对象自身属性的方法时，请使用 function 或 ES6 方法简写。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>场景二：DOM 事件监听器 (Event Listeners)</strong></em> 在使用 addEventListener 为 DOM 元素绑定事件时，我们常常需要访问触发该事件的元素本身（例如，修改它的样式、内容等）。传统 function 会自动将 this 绑定到该 DOM 元素上。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 错误示范</span></span>
<span class="line"><span class="token comment">// 箭头函数再次从外部作用域捕获 this，导致我们无法直接操作点击的按钮。</span></span>
<span class="line"><span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myButton&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 这里的 this 依然是 window 或 undefined，而不是 button 元素</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// TypeError: Cannot read properties of undefined (reading &#39;classList&#39;)</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 正确的写法</span></span>
<span class="line"><span class="token keyword">const</span> button <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myButton&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">button<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">&#39;click&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// 在这里，this 被正确地绑定为触发事件的 button 元素</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;button id=&quot;myButton&quot;&gt;...&lt;/button&gt;</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>classList<span class="token punctuation">.</span><span class="token function">toggle</span><span class="token punctuation">(</span><span class="token string">&#39;active&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 正常工作</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结论： 在 DOM 事件监听回调中，如果我们需要用 this 来引用触发事件的元素，请使用 function。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>场景三：构造函数 (Constructor Functions)</strong></em> 箭头函数在设计上就不能作为构造函数使用。如果我们尝试用 new 关键字来调用一个箭头函数，JavaScript 会直接抛出错误。这是因为构造函数需要有自己的 this 来指向新创建的实例，并且需要一个 prototype 属性，而箭头函数两者都不具备。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 错误示例</span></span>
<span class="line"><span class="token function-variable function">constCar</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter">brand</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">&#39;Tesla&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Uncaught TypeError: Car is not a constructor</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 正确示例</span></span>
<span class="line"><span class="token comment">// 使用function 作为构造函数</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token parameter">brand</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">&#39;Tesla&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myCar<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出:&quot;Tesla&quot;</span></span>
<span class="line"><span class="token comment">// 或者使用现代的 class 语法(其 constructor&#39;也是一个特殊的方法</span></span>
<span class="line"><span class="token keyword">class</span> <span class="token class-name">Bike</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">brand</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span>brand <span class="token operator">=</span> brand<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> myBike <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bike</span><span class="token punctuation">(</span><span class="token string">&#39;Giant&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myBike<span class="token punctuation">.</span>brand<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出:&quot;Giant&quot;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结论： 永远不要用箭头函数作为构造函数。请使用 function 或 class。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>场景四：原型方法 (Prototype Methods)</strong></em> 与对象方法类似，当我们为构造函数的原型 prototype 添加方法时，我们也希望 this 指向调用该方法的实例。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 错误示范</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// this 捕获的是定义 greet 时的全局作用aScrp</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello,my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token keyword">const</span> alice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">alice<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出:&quot;Hello,my name is&quot;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 正确示范</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token class-name">Person</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">greet</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// this 指向调用 greet 方法的实例(alice)</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Hello,my name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> alice <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;Alice&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">alice<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出:&quot;Hello, my name is Alice&#39;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 结论： 在 prototype 上定义方法时，请使用 function，以确保 this 指向类的实例。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>场景五：需要 arguments 对象的函数</strong></em> 箭头函数没有自己的 arguments 对象。arguments 是一个类数组对象，包含了函数被调用时传入的所有参数。如果我们在箭头函数内部访问 arguments，它只会访问到外层（如果存在）传统函数的 arguments 对象。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 错误示范</span></span>
<span class="line"><span class="token keyword">const</span> <span class="token function-variable function">myFunc</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Uncaught ReferenceError: arguments is not defined</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 正确示范</span></span>
<span class="line"><span class="token keyword">function</span> <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出:Arguments(3)[1, 2,3,callee: f, Symbol(ymbol.iterator): f]</span></span>
<span class="line">    <span class="token comment">// 可以像数组一样操作它</span></span>
<span class="line">    <span class="token keyword">const</span> args <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出:&quot;1，2，3&quot;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line"><span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>注意：使用剩余参数，箭头函数也可以</strong></em></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> <span class="token function-variable function">myFuncWithRest</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span></span>
<span class="line">    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 输出: [1,2,3]</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"><span class="token function">myFuncwithRest</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em><strong>最佳使用场景</strong></em></p><ul><li>回调函数：尤其是在 map, filter, forEach 等数组方法中，或者在 setTimeout, Promise.then 内部，当我们需要保持外部 this 上下文时。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> timer <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">  <span class="token literal-property property">seconds</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span></span>
<span class="line">  <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">      <span class="token comment">// 这里的 this 正确地指向 timer 对象，因为箭头函数捕获了 start 方法的 this</span></span>
<span class="line">      <span class="token keyword">this</span><span class="token punctuation">.</span>seconds<span class="token operator">++</span><span class="token punctuation">;</span></span>
<span class="line">      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">  <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">timer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5、这些常见的数组操作-可能导致性能瓶颈" tabindex="-1"><a class="header-anchor" href="#_5、这些常见的数组操作-可能导致性能瓶颈"><span>5、这些常见的数组操作，可能导致性能瓶颈</span></a></h3>`,57)),s("p",null,[n[3]||(n[3]=a("我们每天都在使用 ",-1)),t(p,{color:"#f08d49"},{default:e(()=>n[0]||(n[0]=[s("code",null,"map",-1)])),_:1,__:[0]}),n[4]||(n[4]=a(", ",-1)),t(p,{color:"#f08d49"},{default:e(()=>n[1]||(n[1]=[s("code",null,"filter",-1)])),_:1,__:[1]}),n[5]||(n[5]=a(", ",-1)),t(p,{color:"#f08d49"},{default:e(()=>n[2]||(n[2]=[s("code",null,"reduce",-1)])),_:1,__:[2]}),n[6]||(n[6]=a(" 等方法，享受着函数式编程带来的便利和优雅。 ",-1)),n[7]||(n[7]=s("br",null,null,-1)),n[8]||(n[8]=a(" 然而，优雅的背后可能隐藏着性能的潜在风险。在处理小规模数据时，这些问题微不足道，但当我们的应用需要处理成百上千，甚至数万条数据时，一些看似无害的操作可能会变成压垮骆驼的最后一根稻草，导致页面卡顿、响应迟缓。 ",-1)),n[9]||(n[9]=s("br",null,null,-1)),n[10]||(n[10]=s("strong",null,"1. 不必要的循环和中间数组",-1)),n[11]||(n[11]=s("br",null,null,-1)),n[12]||(n[12]=a(" 这是最常见也最容易被忽视的问题。考虑这样一个场景：我们需要从一个用户列表中，筛选出所有激活状态（isActive）的用户，并且只提取他们的名字（name）。 ",-1)),n[13]||(n[13]=s("br",null,null,-1)),n[14]||(n[14]=a(" 很多开发者会这样写：",-1))]),n[70]||(n[70]=o(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token comment">/* ... 一个包含 10,000 个用户的数组 ... */</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 写法一：链式调用</span></span>
<span class="line"><span class="token keyword">const</span> activeUserNames <span class="token operator">=</span> users</span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>isActive<span class="token punctuation">)</span> <span class="token comment">// 第一次循环，生成一个中间数组</span></span>
<span class="line">    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">user</span> <span class="token operator">=&gt;</span> user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 第二次循环，在中间数组上操作</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>activeUserNames<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码清晰、易读，但它存在一个性能问题：它循环了两次，并创建了一个临时的中间数组。 <br></p><ul><li><code>filter</code> 方法会遍历所有 10,000 个用户，创建一个新的数组（比如包含 5,000 个激活用户）。 <br></li><li><code>map</code> 方法会再次遍历这个包含 5,000 个用户的中间数组，提取名字，并最终生成结果数组。总共的迭代次数是 10,000 + 5,000 = 15,000 次。</li></ul><p><strong>优化方案：一次循环搞定</strong></p><p>我们可以使用 <code>reduce</code> 或者一个简单的 <code>for循环</code>，只遍历一次数组就完成所有工作。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 使用reduce</span></span>
<span class="line"><span class="token keyword">const</span> activeUserNames <span class="token operator">=</span> users<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> user</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>isActive<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        acc<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> acc<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用 for...of (通常性能更好，更易读)</span></span>
<span class="line"><span class="token keyword">const</span> activeUserNames <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> user <span class="token keyword">of</span> users<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span> <span class="token punctuation">(</span>user<span class="token punctuation">.</span>isActive<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        activeUserNames<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 这两种优化方法都只进行了 10,000 次迭代，并且没有创建任何不必要的中间数组。在数据量巨大时，性能提升非常显著。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,7)),s("p",null,[s("strong",null,[n[17]||(n[17]=a("2. ",-1)),t(p,{color:"#f08d49"},{default:e(()=>n[15]||(n[15]=[s("code",null,"unshift",-1)])),_:1,__:[15]}),n[18]||(n[18]=a(" 和 ",-1)),t(p,{color:"#f08d49"},{default:e(()=>n[16]||(n[16]=[s("code",null,"shift",-1)])),_:1,__:[16]}),n[19]||(n[19]=a(" —— 数组头部的“昂贵”操作",-1))]),n[20]||(n[20]=a(" 我们需要在数组的开头添加或删除元素时，很自然地会想到 ",-1)),n[21]||(n[21]=s("code",null,"unshift",-1)),n[22]||(n[22]=a(" 和 ",-1)),n[23]||(n[23]=s("code",null,"shift",-1)),n[24]||(n[24]=a("。 ",-1)),n[25]||(n[25]=s("br",null,null,-1)),n[26]||(n[26]=a(" 但这两个操作在性能上非常“昂贵”。JavaScript 的数组在底层是以连续的内存空间存储的。",-1))]),n[71]||(n[71]=o(`<ul><li>当我们 <code>unshift</code> 一个新元素时，为了给这个新元素腾出位置，数组中所有现有元素都需要向后移动一位。</li><li>同样，当我们 <code>shift</code> 删除第一个元素时，为了填补空缺，所有后续元素都需要向前移动一位。 <br> 想象一下在电影院里，我们坐在第一排，然后一个新人要挤到我们左边的 0 号位置。整排的人都得挪动屁股！数据量越大，这个“挪动”的成本就越高。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> numbers<span class="token operator">=</span><span class="token punctuation">[</span><span class="token comment">/*···100,000个数字..·*/</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 极其缓慢的操作!</span></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line"> numbers<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//每次操作都要移动所有现有元素</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>优化方案：用 <code>push</code> 和 <code>pop</code>，或者先 <code>reverse</code></strong></p><ul><li><strong>从尾部操作</strong>：<code>push</code> 和 <code>pop</code> 只操作数组的末尾，不需要移动其他元素，因此速度极快（O(1) 复杂度）。如果业务逻辑允许，尽量将操作改为在数组尾部进行。</li><li><strong>先收集，再反转</strong>：如果我们确实需要在开头添加一堆元素，更好的办法是先把它们 <code>push</code> 进一个临时数组，然后通过 <code>concat</code> 或扩展语法合并，或者最后进行一次 <code>reverse</code>。</li></ul><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token comment">/* ... 100,000 个数字 ... */</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> newItems <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">    newItems<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 在新数组尾部添加，非常快</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 最终合并，比 1000 次 unshift 快得多</span></span>
<span class="line"><span class="token keyword">const</span> finalArray <span class="token operator">=</span> newItems<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,6)),s("p",null,[s("strong",null,[n[30]||(n[30]=a("3. 滥用",-1)),t(p,{color:"#f08d49"},{default:e(()=>n[27]||(n[27]=[s("code",null,"includes",-1)])),_:1,__:[27]}),n[31]||(n[31]=a(",",-1)),t(p,{color:"#f08d49"},{default:e(()=>n[28]||(n[28]=[s("code",null,"indexOf",-1)])),_:1,__:[28]}),n[32]||(n[32]=a(",",-1)),t(p,{color:"#f08d49"},{default:e(()=>n[29]||(n[29]=[s("code",null,"find",-1)])),_:1,__:[29]})]),n[33]||(n[33]=a(" 在循环中查找一个元素是否存在于另一个数组中，是一个非常常见的需求",-1))]),n[72]||(n[72]=o(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> productIds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token comment">/*1,000个ID.-*/</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> productsInStock <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token comment">/*:5,000个有库存的产品对象”。*/</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// 性能糟糕的写法</span></span>
<span class="line"><span class="token keyword">const</span> availableProducts <span class="token operator">=</span> productsInStock<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">product</span> <span class="token operator">=&gt;</span> </span>
<span class="line">    productIds<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>product<span class="token punctuation">,</span>id<span class="token punctuation">)</span> <span class="token comment">//每次 filter 都要在 productIds 中搜索一遍</span></span>
<span class="line"><span class="token punctuation">)</span> </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[35]||(n[35]=a("这段代码的问题在于，",-1)),n[36]||(n[36]=s("code",null,"filter",-1)),n[37]||(n[37]=a(" 每遍历一个库存产品，",-1)),n[38]||(n[38]=s("code",null,"includes",-1)),n[39]||(n[39]=a(" 就要从头到尾搜索 ",-1)),n[40]||(n[40]=s("code",null,"productIds",-1)),n[41]||(n[41]=a(" 数组来查找匹配项。如果 ",-1)),n[42]||(n[42]=s("code",null,"productIds",-1)),n[43]||(n[43]=a(" 很大，这个嵌套循环的计算量将是 ",-1)),t(p,{color:"#f08d49"},{default:e(()=>n[34]||(n[34]=[s("code",null,"5000 * 1000",-1)])),_:1,__:[34]}),n[44]||(n[44]=a("，非常恐怖",-1))]),n[73]||(n[73]=o(`<p><strong>优化方案：使用 <code>Set</code> 或 <code>Map</code> 创建查找表</strong><code>Set</code> 和 <code>Map</code> 数据结构在查找元素方面具有天然的性能优势。它们的查找时间复杂度接近 O(1)，几乎是瞬时的，无论集合有多大。 <br> 我们可以先把用于查找的数组转换成一个 <code>Set</code>。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> productIds <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token comment">/* ... 1,000 个 ID ... */</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> productsInStock <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token comment">/* ... 5,000 个有库存的产品对象 ... */</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 1. 创建一个 Set 用于快速查找</span></span>
<span class="line"><span class="token keyword">const</span> idSet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>productIds<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 这一步很快</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 2. 在 filter 中使用 Set.has()</span></span>
<span class="line"><span class="token keyword">const</span> availableProducts <span class="token operator">=</span> productsInStock<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">product</span> <span class="token operator">=&gt;</span></span>
<span class="line">     idSet<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>product<span class="token punctuation">.</span>id<span class="token punctuation">)</span>  <span class="token comment">// .has() 操作近乎瞬时完成</span></span>
<span class="line"><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 通过一次性的转换，将一个嵌套循环的性能问题，优化成了一个单次循环，性能提升是数量级的。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6、array-from-的-几个好用用法-彻底告别-for-循环初始化" tabindex="-1"><a class="header-anchor" href="#_6、array-from-的-几个好用用法-彻底告别-for-循环初始化"><span>6、Array.from() 的 几个好用用法，彻底告别 for 循环初始化！</span></a></h3><p><strong>用法一：创建数字序列（替代 <code>for</code> 循环）</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 需求:创建一个长度为 5，值为[0，1，2，3,4]的数组</span></span>
<span class="line"><span class="token comment">// 老办法:for 循环</span></span>
<span class="line"><span class="token keyword">const</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">for</span><span class="token punctuation">(</span> <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span> </span>
<span class="line">    arr1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">//神仙用法:Array.from()</span></span>
<span class="line"><span class="token keyword">const</span> arr2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span><span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">value<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// [0,1，2，3，4]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用法二：生成特定规则的数组</strong><code>for</code> 循环能做的，<code>Array.from()</code> 都能做得更漂亮。比如，生成一个由偶数组成的数组，或者一个平方数序列。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 需求 1：创建一个包含 5 个偶数的数组 [0, 2, 4, 6, 8]</span></span>
<span class="line"><span class="token keyword">const</span> evens <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> i <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>evens<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [0, 2, 4, 6, 8]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 需求 2：创建一个包含 1 到 5 的平方的数组 [1, 4, 9, 16, 25]</span></span>
<span class="line"><span class="token keyword">const</span> squares <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>squares<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 4, 9, 16, 25]</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 需求 3：创建 5 个内容相同的元素</span></span>
<span class="line"><span class="token keyword">const</span> fives <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">5</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>fives<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [5, 5, 5, 5, 5]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用法三：快速初始化对象数组</strong></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 需求:创建一个包含 3 个用户的数组，每个用户有 id 和一个随机分数</span></span>
<span class="line"><span class="token keyword">const</span> users <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">length</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span>i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span></span>
<span class="line">    <span class="token literal-property property">id</span><span class="token operator">:</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    <span class="token literal-property property">score</span><span class="token operator">:</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">//0-100的随机分</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token doc-comment comment">/**</span>
<span class="line"> [</span>
<span class="line">   <span class="token punctuation">{</span> id: 1, score: 42 <span class="token punctuation">}</span>,</span>
<span class="line">   <span class="token punctuation">{</span> id: 2, score: 78 <span class="token punctuation">}</span>,</span>
<span class="line">   <span class="token punctuation">{</span> id: 3, score: 56 <span class="token punctuation">}</span></span>
<span class="line"> ]</span>
<span class="line"> */</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用法四：复制并深度处理数组</strong><code>Array.from()</code> 不仅能从零创建，还能基于现有数组进行“深加工”。它在转换的同时进行映射，一步到位，避免了先 <code>map</code> 再 <code>filter</code> 等可能产生的中间数组。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&#39;2&#39;</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 需求：从一个混合数组中，只提取出数字，并将非数字转为 0</span></span>
<span class="line"><span class="token comment">// 返回 [1, 0, 3, 0, 0, 5]</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> processed <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">const</span> num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token function">isNaN</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> num<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>processed<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 0, 4, 5]   &lt;-- 修正：Number(&#39;2&#39;) 是 2，Number(null) 是 0</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 需求：将所有数字乘以2，非数字项保持为 null</span></span>
<span class="line"><span class="token keyword">const</span> processedV2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">return</span> <span class="token keyword">typeof</span> item <span class="token operator">===</span> <span class="token string">&#39;number&#39;</span> <span class="token operator">?</span> item <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>processedV2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [2, null, 6, null, null, 10]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>用法五：巧妙生成字母序列</strong> 谁说只能处理数字？<code>Array.from()</code> 结合字符编码，可以轻松生成字母表。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// 需求：生成一个从 &#39;A&#39; 到 &#39;Z&#39; 的字母数组</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> alphabet <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">length</span><span class="token operator">:</span> <span class="token number">26</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">_<span class="token punctuation">,</span> i</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token comment">// &#39;A&#39; 的 ASCII 码是 65</span></span>
<span class="line">    <span class="token keyword">return</span> String<span class="token punctuation">.</span><span class="token function">fromCharCode</span><span class="token punctuation">(</span><span class="token number">65</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>alphabet<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token comment">// [&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, ..., &quot;Z&quot;]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7、array-prototype-with-index-value-让数组操作性能翻倍" tabindex="-1"><a class="header-anchor" href="#_7、array-prototype-with-index-value-让数组操作性能翻倍"><span>7、Array.prototype.with(index, value) 让数组操作性能翻倍！</span></a></h3>`,14)),s("p",null,[n[46]||(n[46]=a("在前端开发中，尤其是在使用 React 或 Vue 等现代框架时，我们被反复告知一个黄金法则：",-1)),t(p,{color:"#f08d49"},{default:e(()=>n[45]||(n[45]=[s("strong",null,"不要直接修改状态（Don’t mutate state）",-1)])),_:1,__:[45]}),n[47]||(n[47]=a(" 。这意味着，当我们需要更新一个数组中的某个元素时，我们不能这样做：",-1))]),n[74]||(n[74]=o(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token comment">// ❌ 错误的做法！这会直接修改原始数组</span></span>
<span class="line"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;c&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line">state<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;x&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 这是一个“突变” (mutation)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,1)),s("p",null,[n[49]||(n[49]=a("为什么？因为这会破坏状态的可预测性，让框架的变更检测机制“失灵”，导致各种难以追踪的 Bug。 ",-1)),n[50]||(n[50]=s("br",null,null,-1)),n[51]||(n[51]=a(" 为了遵循“不可变性”（Immutability）原则，我们多年来一直依赖一些经典的“曲线救国”方案。但浏览器已经悄悄地支持了一个全新的原生 API，它不仅让代码更优雅，还能在某些场景下让性能得到显著提升。 它就是 —— ",-1)),t(p,{color:"#f08d49"},{default:e(()=>n[48]||(n[48]=[s("strong",null,"Array.prototype.with(index, value)",-1)])),_:1,__:[48]}),n[52]||(n[52]=a(" 。 ",-1)),n[53]||(n[53]=s("br",null,null,-1)),n[54]||(n[54]=a(" 在 ",-1)),n[55]||(n[55]=s("code",null,"with()",-1)),n[56]||(n[56]=a(" 出现之前，要“不可变地”更新数组中的一个元素，我们通常有两种主流方法： ",-1)),n[57]||(n[57]=s("br",null,null,-1)),n[58]||(n[58]=a(" 方法一：使用 ",-1)),n[59]||(n[59]=s("code",null,"map()",-1))]),n[75]||(n[75]=o(`<div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> oldArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;orange&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;grape&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"><span class="token keyword">const</span> newArray <span class="token operator">=</span> oldArray<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">if</span><span class="token punctuation">(</span>index <span class="token operator">===</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&#39;mango&#39;</span><span class="token punctuation">;</span> <span class="token comment">//在指定位置返回新值</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    <span class="token keyword">return</span> item<span class="token punctuation">;</span>    <span class="token comment">// 其他位置返回原值});</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[&#39;apple&#39;,&#39;banana&#39;,&#39;mango&#39;，&#39;grape&#39;]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//[&#39;apple&#39;,&#39;banana&#39;,&#39;orange&#39;，&#39;grape&#39;](未被改变)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 优点：非常直观，函数式编程的典范。</span></span>
<span class="line"><span class="token comment">// 缺点：性能开销大。即使我们只改变一个元素，map() 依然会遍历整个数组，从头到尾创建一个新数组。当数组包含成千上万个元素时，这种浪费是显而易见的。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方法二：使用展开语法 <code>...</code> 或 <code>slice()</code></p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> oldArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;grape&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 使用展开语法</span></span>
<span class="line"><span class="token keyword">const</span> newArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>oldArray<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 1. 创建一个浅拷贝</span></span>
<span class="line">newArray<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;mango&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 2. 修改拷贝后的数组</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 或者使用 slice()</span></span>
<span class="line"><span class="token comment">// const newArray = oldArray.slice();</span></span>
<span class="line"><span class="token comment">// newArray[2] = &#39;mango&#39;;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;apple&#39;, &#39;banana&#39;, &#39;mango&#39;, &#39;grape&#39;]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;, &#39;grape&#39;] (未被改变)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment">// 优点：比 map() 更直接，意图更清晰。</span></span>
<span class="line"><span class="token comment">// 缺点：代码有点啰嗦，需要两步操作（先复制，再赋值）。而且，它同样需要完整地遍历并复制整个原始数组，性能瓶颈依然存在。</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在，让我们看看 <code>with()</code> 是如何将上述操作简化为一步的。 <br><code>with(index, value)</code> 方法接收两个参数：要替换的元素的索引和新值。它会返回一个全新的数组，其中指定索引处的元素已被替换，而原始数组保持不变。</p><div class="language-javascript line-numbers-mode" data-highlighter="prismjs" data-ext="js"><pre><code class="language-javascript"><span class="line"><span class="token keyword">const</span> oldArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;apple&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;banana&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;grape&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line"><span class="token keyword">const</span> newArray <span class="token operator">=</span> oldArray<span class="token punctuation">.</span><span class="token function">with</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">&#39;mango&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;apple&#39;, &#39;banana&#39;, &#39;mango&#39;, &#39;grape&#39;]</span></span>
<span class="line">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>oldArray<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [&#39;apple&#39;, &#39;banana&#39;, &#39;orange&#39;, &#39;grape&#39;] (完美！原始数组安然无恙)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br>`,6)),s("p",null,[n[64]||(n[64]=a("总结：",-1)),t(p,{color:"#f08d49"},{default:e(()=>n[60]||(n[60]=[s("code",null,"with()",-1)])),_:1,__:[60]}),n[65]||(n[65]=a(" 向 JavaScript 引擎传递了一个更明确的信号。当我们使用 ",-1)),t(p,{color:"#f08d49"},{default:e(()=>n[61]||(n[61]=[s("code",null,"[...oldArray]",-1)])),_:1,__:[61]}),n[66]||(n[66]=a(" 时，我们告诉引擎：“我需要一个这个数组的完整克隆品，所有元素都得复制一遍。” 引擎只能老老实实地分配新内存，然后遍历拷贝。而当我们使用 ",-1)),t(p,{color:"#f08d49"},{default:e(()=>n[62]||(n[62]=[s("code",null,"oldArray.with(2, 'mango')",-1)])),_:1,__:[62]}),n[67]||(n[67]=a(" 时，我们告诉引擎：“我需要一个和 ",-1)),t(p,{color:"#f08d49"},{default:e(()=>n[63]||(n[63]=[s("code",null,"oldArray",-1)])),_:1,__:[63]}),n[68]||(n[68]=a(" 几乎一样的新数组，只有一个位置不同。”",-1))]),n[76]||(n[76]=s("p",null,[a("对于一个包含 100 万个元素的数组，"),s("code",null,"map()"),a(" 和 "),s("code",null,"slice()"),a(" 需要复制 100 万个元素引用，而 "),s("code",null,"with()"),a(" 的理想开销接近于只处理 1 个元素。这就是“性能翻倍”说法的底气所在。")],-1))])}const b=l(k,[["render",d]]),g=JSON.parse('{"path":"/JavaScript/knowledge.html","title":"","lang":"en-US","frontmatter":{},"git":{"contributors":[{"name":"shadowKayn","username":"shadowKayn","email":"li.yuan@zcits.com","commits":1,"url":"https://github.com/shadowKayn"}],"changelog":[{"hash":"135424a202fcf2ea6a2f4facb7ab6f595df04436","time":1753437455000,"email":"li.yuan@zcits.com","author":"shadowKayn","message":"fix:修改依赖"}]},"filePathRelative":"JavaScript/knowledge.md"}');export{b as comp,g as data};
