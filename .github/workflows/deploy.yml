name: Deploy VuePress Site

on:
  push:
    branches:
      - master  # 当 master 分支有新的 push 时触发

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️ 检出代码
        uses: actions/checkout@v3

      - name: 🔧 设置 Node.js 环境
        uses: actions/setup-node@v3
        with:
          node-version: '20'  # 适用于 VuePress 2
          registry-url: 'https://registry.npmjs.org'
          # 重要：暂时禁用缓存，确保每次都重新安装依赖
          # 这样可以排除缓存导致的问题
          cache: 'npm' # 如果你使用的是 npm 安装 pnpm，这里也保持 npm

      - name: 📦 安装 pnpm (通过 npm 全局安装)
        # 再次确认通过 npm 全局安装 pnpm，这是最稳定的方式
        run: npm install -g pnpm@8

      - name: 🔍 验证 pnpm 安装和版本
        # 打印 pnpm 版本，确认它已安装并可用
        run: pnpm -v

      - name: 📦 安装项目依赖
        # 强制 pnpm 重新安装所有依赖，即使锁文件存在
        # 这样可以确保任何潜在的缓存或状态问题被清除
        # --frozen-lockfile 确保严格按照 lockfile 安装，如果 lockfile 不匹配则报错
        # --prefer-frozen-lockfile 尝试按照 lockfile 安装，如果lockfile有问题就重新生成
        # 我们用 pnpm install 即可，它会自行处理 lockfile
        run: pnpm install --no-frozen-lockfile # 避免在 CI 环境中锁文件不匹配导致报错，允许重新生成依赖

      - name: ✅ 批准构建脚本
        # 确保之前在本地批准的构建脚本在 CI 环境中也生效
        run: pnpm approve-builds @parcel/watcher esbuild vue-demi

      - name: 🔧 安装 sass（可选）
        run: pnpm add -D sass-embedded sass

      - name: 🔧 配置 Git 用户
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: 🏗️ 构建 VuePress
        run: pnpm run build

      - name: 🚀 部署到 GitHub Pages
        run: pnpm run deploy
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}